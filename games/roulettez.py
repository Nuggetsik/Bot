from pathlib import Path
import asyncio
from aiogram import Dispatcher, types
from create_bot import dp, bot
from date_base import sqlite_db
from machine import machine_condition as machine
from games import arithmetic,cancel_bid
from keyboards import bits
from aiogram.types import InputFile
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher.filters import Text
from games import num_let



import random


import tracemalloc

# –í–∫–ª—é—á–∞–µ–º tracemalloc
tracemalloc.start()

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à —Å–∫—Ä–∏–ø—Ç
current_directory = Path(__file__).resolve().parent.parent

# –°–æ–±–∏—Ä–∞–µ–º –ø—É—Ç—å –∫ –≥–∏—Ñ–∫–µ, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–≤—É—Ö –ø–∞–ø–∫–∞—Ö –≤—ã—à–µ
GIF_PATH1 = (current_directory / 'material/rlt1.mp4').resolve()
GIF_PATH2 = (current_directory / 'material/rlt2.mp4').resolve()
gif = [GIF_PATH1, GIF_PATH2]
#—Å–ø–∏—Å–æ–∫ —Å—Ç–∞–≤–æ–∫
list_players = {}
numbers_player = 1


from_roulettez = ['–†—É–ª–µ—Ç–∫–∞ –∫—Ä—É—Ç–∏—Ç—å—Å—è, –±–∞–±–æ—Å—ã –º—É—Ç—è—Ç—Å—è', '–í—Ä–∞—â–∞–π—Ç–µ –±–∞—Ä–∞–±–∞–Ω']
numbers = [0,1,2,3,4,5,6,7,8,9,10,11,12]
colors = ["üî¥", "üíö", "‚ö´Ô∏è"]

id_bot_mess = []
async def send_message(callback, text):
    sent_message = await bot.send_message(chat_id=callback.message.chat.id, text=text)

    id_bot_mess.append(sent_message)

async def delete_message(callback):
    try:
        for sent_message in id_bot_mess:
            await bot.delete_message(chat_id=sent_message.chat.id, message_id=sent_message.message_id)
    except Exception as e:
        print(f"Failed to delete message: {e}")

async def send_and_delete_gif(callback):
    sent_message = await bot.send_animation(chat_id=callback.message.chat.id, animation=InputFile(random.choice(gif)))
    
    # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(3)
    
    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–∏—Ñ–∫–æ–π
    try:
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=sent_message.message_id)
    except Exception as e:
        print(f"Failed to delete message: {e}")

def bet_countin_number(win_number, bit_pl, user, win_list, range_number, id):
    user_money = 5
    try:
        if win_number in range(int(bit_pl[0]), int(bit_pl[-1])):
            
            win_money = user_money*2
            arithmetic.winnings_money(sqlite_db, id, win_money)
            arithmetic.addition(sqlite_db, id, win_money)
            win_list += f"{user.first_name} –≤—ã–∏–≥—Ä–∞–ª {win_money}  –Ω–∞ {range_number}\n"
        else:
            
            arithmetic.losting_money(sqlite_db, id, user_money)
            win_list += f"{user.first_name} –Ω–∞ {range_number}\n"
        
    except:
        win_list = bet_countin_color(win_number, bit_pl, user, win_list, id)
    return win_list

def bet_countin_color(win_number, bit_pl, user, win_list, id):
    user_money = 5
    if num_let.num_let[win_number] == bit_pl[-1]:
        win_money = user_money*2
        arithmetic.addition(sqlite_db, id, win_money)
        arithmetic.winnings_money(sqlite_db, id, win_money)
        win_list += f"{user.first_name} –≤—ã–∏–≥—Ä–∞–ª {win_money}  –Ω–∞ {bit_pl[-1]}\n"
    else:
        arithmetic.losting_money(sqlite_db, id, user_money)
        win_list += f"{user.first_name} –Ω–∞ {bit_pl[-1]}\n"
    return win_list

def add_list_player(id_player, data):
    global numbers_player
    global numbers
    #–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–≤–æ–∫ (–∏–≥—Ä–æ–∫–æ–≤)
    
    list_players[numbers_player] = {id_player : data}

    sqlite_db.cur.execute(f"SELECT money FROM players WHERE id={id_player}")
    user_money = sqlite_db.cur.fetchone()[0]
    return user_money

async def check_money(user_money, id_player, callback):
   
    #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª-–≤–æ –¥–µ–Ω–µ–≥
    global numbers_player
    global numbers
    if user_money >= 5:   
        arithmetic.subtraction(sqlite_db, id_player, 5)
        if callback.data != "–£–¥–≤–æ–∏—Ç—å" and callback.data != '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å':
            await send_message(callback, text = f"–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: {callback.from_user.first_name} {callback.data}")

        numbers_player += 1

    else:
        await callback.message.answer(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥, —É –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É: {user_money}")

#–ø—Ä–∏–Ω—è—Ç–∏—è —Å—Ç–∞–≤–æ–∫/—Ä–∞–±–æ—Ç–∞ –∫–Ω–æ–ø–æ–∫ –æ—Ç –±–æ—Ç–∞
@dp.callback_query_handler()
async def command(callback: types.CallbackQuery):
    #–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
    

    global numbers_player
    global numbers
    
    #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Å—Ç–∞–≤–∫–∏
    if (callback.data == "1 - 3" or callback.data == "4 - 6" or 
        callback.data == "7 - 9" or callback.data=="10 - 12"
        or callback.data == "5 –Ω–∞ üî¥" or callback.data == "5 –Ω–∞ ‚ö´Ô∏è"
        or callback.data == "5 –Ω–∞ üíö"):

        #–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–≤–æ–∫ (–∏–≥—Ä–æ–∫–æ–≤)
        user_money = add_list_player(callback.from_user.id, callback.data)

        #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª-–≤–æ –¥–µ–Ω–µ–≥
        await check_money(user_money, callback.from_user.id, callback)

    #–£–¥–≤–æ–∏—Ç—å
    if callback.data == "–£–¥–≤–æ–∏—Ç—å":
        id_player = callback.from_user.id
        double_list = {key: value for key, value in list_players.items()}
        for i in double_list:
            
            for id_for_list in double_list[i].keys(): 
                if id_for_list == id_player:
                    #–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–≤–æ–∫ (–∏–≥—Ä–æ–∫–æ–≤)
                    user_money = add_list_player(id_player, double_list[i][id_player])
                    #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª-–≤–æ –¥–µ–Ω–µ–≥
                    await check_money(user_money, id_player, callback)

        await send_message(callback, text = f"–í—Å–µ —Å—Ç–∞–≤–∫–∏ {callback.from_user.first_name} —É–¥–≤–æ–µ–Ω—ã")
        
                    
    #–≤—Ä–∞—â–∞—Ç—å –±–∞—Ä–∞–±–∞–Ω
    if callback.data == "–ö—Ä—É—Ç–∏—Ç—å":
        if len(list_players) != 0: 
            win_number = random.choice(numbers)

            win_list = f"–†—É–ª–µ—Ç–∫–∞ {win_number} {num_let.num_let[win_number]}\n"

            await send_message(callback, f"{callback.from_user.first_name} –∫—Ä—É—Ç–∏—Ç —Ä—É–ª–µ—Ç–∫—É")
            asyncio.ensure_future(send_and_delete_gif(callback))
            await asyncio.sleep(3)

            for n in list_players:
                for id in list_players[n]:
                    range_number = list_players[n][id]
                    bit_pl = range_number.split(" ")
                    for id in list_players[n]:
                        user = await bot.get_chat(id)
                        win_list = bet_countin_number(win_number, bit_pl, user, win_list, range_number, id)
                    

            await callback.message.answer(text=win_list)
            list_players.clear()
            await delete_message(callback)
            id_bot_mess.clear()
        elif len(list_players) == 0:
            await callback.message.answer("–°—Ç–∞–≤–∫–∏ –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏—Å—å. –°–ø–µ—Ä–≤–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É")
            
#–∑–∞–ø—É—Å–∫ –∫–æ–º–º–∞–Ω–¥–ª—ã —Ä—É–ª–µ—Ç–∫–∏
async def roulettez_start(message: types.Message):
    await message.answer(text="""–ú–∏–Ω–∏—Ä—É–ª–µ—Ç–∫–∞
–£–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –∏–∑:
0üíö
1üî¥ 2‚ö´Ô∏è 3üî¥ 4‚ö´Ô∏è 5üî¥ 6‚ö´Ô∏è
7üî¥ 8‚ö´Ô∏è 9üî¥10‚ö´Ô∏è11üî¥12‚ö´Ô∏è
–°—Ç–∞–≤–∫–∏ –º–æ–∂–Ω–æ —Ç–µ–∫—Å—Ç–æ–º:
10 –Ω–∞ –∫—Ä–∞—Å–Ω–æ–µ | 5 –Ω–∞ 12""", reply_markup=bits)
    



cancel_bid.register_hendlers_cancel(dp)

def register_hendlers_roulettez(dp : Dispatcher):
    dp.register_message_handler(roulettez_start, Text(equals='–†—É–ª–µ—Ç–∫–∞', ignore_case=True), state="*")
   